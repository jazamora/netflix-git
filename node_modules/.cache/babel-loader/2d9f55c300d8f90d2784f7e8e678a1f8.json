{"ast":null,"code":"import _classCallCheck from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/jazamora/dev/netflix/src/components/Sidebar.js\";\nimport React from 'react';\nimport Commit from './Commit';\nimport ErrorBoundry from './ErrorBoundry';\n/**\n * SideBar component that hold commit list for a specific repo\n */\n\nvar SideBar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SideBar, _React$Component);\n\n  function SideBar(props) {\n    var _this;\n\n    _classCallCheck(this, SideBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SideBar).call(this, props));\n    _this.state = {\n      commitList: null // List of commits \n      // Ref to reset scroll\n\n    };\n    _this.commitListRef = React.createRef(); // Handles the closing of this component\n\n    _this.handleCloseClick = _this.handleCloseClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /**\n   * Fetch commit list data when component mounts\n   */\n\n\n  _createClass(SideBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchCommitList();\n    }\n    /**\n     * When a component updates, fetch new data and reset scroll\n     * \n     * @param {object} prevProps \n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.repo !== prevProps.repo) {\n        this.fetchCommitList();\n      } else {\n        // Scroll to the top of the commit list\n        this.commitListRef.current.scrollTop = 0;\n      }\n    }\n    /**\n     * Handle the Sibar being closed\n     * \n     * @param {object} e \n     */\n\n  }, {\n    key: \"handleCloseClick\",\n    value: function handleCloseClick(e) {\n      this.props.onClick();\n    }\n    /**\n     * Fetch a list of commits for a repo\n     */\n\n  }, {\n    key: \"fetchCommitList\",\n    value: function fetchCommitList() {\n      var _this2 = this;\n\n      // Git URL to fetch for commits\n      var url = \"https://api.github.com/repos/\".concat(this.props.repo, \"/commits\");\n      fetch(url, {\n        method: \"GET\"\n      }).then(function (response) {\n        if (!response.ok) {\n          throw Error(response);\n        }\n\n        return response.json();\n      }).then(function (data) {\n        _this2.setState({\n          commitList: data\n        });\n      }).catch(function (response) {\n        _this2.setState({\n          commitList: []\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var commitList; // Check to see if there are commits to show\n\n      if (this.state.commitList && this.state.commitList.length) {\n        commitList = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, this.state.commitList.map(function (commit) {\n          var login = !!commit.committer ? commit.committer.login : commit.commit.author.name;\n          var login_url = !!commit.committer ? commit.committer.html_url : null;\n          var avatar_url = !!commit.committer ? commit.committer.avatar_url : null;\n          return React.createElement(Commit, {\n            key: commit.sha,\n            sha: commit.sha,\n            login: login,\n            login_url: login_url,\n            avatar_url: avatar_url,\n            email: commit.commit.committer.email,\n            date: commit.commit.committer.date,\n            message: commit.commit.message,\n            html_url: commit.html_url,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          });\n        }));\n      } // No results where found, handle empty state\n      else if (this.state.commitList) {\n          commitList = React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          }, \" No commits found\");\n        } // Loading state\n        else {\n            var totalElements = 10; // Initialize to an array to allow arbritary length of content loaders\n\n            commitList = [];\n            commitList.push(React.createElement(\"h4\", {\n              key: \"title\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 120\n              },\n              __self: this\n            }));\n\n            for (var i = 0; i < totalElements; i++) {\n              commitList.push(React.createElement(\"div\", {\n                className: \"commit\",\n                key: i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 124\n                },\n                __self: this\n              }, React.createElement(\"h4\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 125\n                },\n                __self: this\n              }), React.createElement(\"p\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 126\n                },\n                __self: this\n              }), React.createElement(\"p\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 127\n                },\n                __self: this\n              })));\n            }\n          }\n\n      return React.createElement(\"div\", {\n        className: \"sidebar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"close\",\n        onClick: this.handleCloseClick,\n        title: \"Close Sidebar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.props.repo, \" commits\"), React.createElement(\"div\", {\n        className: \"commit-list\",\n        ref: this.commitListRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(ErrorBoundry, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, commitList)));\n    }\n  }]);\n\n  return SideBar;\n}(React.Component);\n\nexport default SideBar;","map":{"version":3,"sources":["/Users/jazamora/dev/netflix/src/components/Sidebar.js"],"names":["React","Commit","ErrorBoundry","SideBar","props","state","commitList","commitListRef","createRef","handleCloseClick","bind","fetchCommitList","prevProps","repo","current","scrollTop","e","onClick","url","fetch","method","then","response","ok","Error","json","data","setState","catch","length","map","commit","login","committer","author","name","login_url","html_url","avatar_url","sha","email","date","message","totalElements","push","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Commit from './Commit';\nimport ErrorBoundry from './ErrorBoundry';\n\n/**\n * SideBar component that hold commit list for a specific repo\n */\nclass SideBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            commitList: null // List of commits \n        }\n\n        // Ref to reset scroll\n        this.commitListRef = React.createRef();\n\n        // Handles the closing of this component\n        this.handleCloseClick = this.handleCloseClick.bind(this);\n    }\n\n    /**\n     * Fetch commit list data when component mounts\n     */\n    componentDidMount() {\n        this.fetchCommitList();\n    }\n\n    /**\n     * When a component updates, fetch new data and reset scroll\n     * \n     * @param {object} prevProps \n     */\n    componentDidUpdate(prevProps) {\n        if (this.props.repo !== prevProps.repo) {\n            this.fetchCommitList();\n        } else {\n            // Scroll to the top of the commit list\n            this.commitListRef.current.scrollTop = 0;\n        }\n    }\n\n    /**\n     * Handle the Sibar being closed\n     * \n     * @param {object} e \n     */\n    handleCloseClick(e) {\n        this.props.onClick();\n    }\n\n    /**\n     * Fetch a list of commits for a repo\n     */\n    fetchCommitList() {\n        // Git URL to fetch for commits\n        const url = `https://api.github.com/repos/${this.props.repo}/commits`;\n\n        fetch(url, {\n            method: \"GET\"\n        }).then(response => {\n            if (!response.ok) {\n                throw Error(response);\n            }\n            return response.json();\n        }).then((data) => {\n            this.setState({\n                commitList: data\n            });\n        }).catch((response) => {\n            this.setState({\n                commitList: []\n            });\n        });\n    }\n\n    render() {\n        let commitList;\n\n        // Check to see if there are commits to show\n        if (this.state.commitList && this.state.commitList.length) {\n            commitList = (\n                <React.Fragment>\n                    {\n                        this.state.commitList.map((commit) => {\n                            const login = (!!commit.committer) ? commit.committer.login : commit.commit.author.name;\n                            const login_url = (!!commit.committer) ? commit.committer.html_url : null;\n                            const avatar_url = (!!commit.committer) ? commit.committer.avatar_url : null;\n\n                            return (\n                                <Commit key={commit.sha}\n                                    sha={commit.sha}\n                                    login={login}\n                                    login_url={login_url}\n                                    avatar_url={avatar_url}\n                                    email={commit.commit.committer.email}\n                                    date={commit.commit.committer.date}\n                                    message={commit.commit.message}\n                                    html_url={commit.html_url}\n                                />\n                            );\n                        })\n                    }\n                </React.Fragment>\n            )\n        }\n        // No results where found, handle empty state\n        else if (this.state.commitList) {\n            commitList = (\n                <span> No commits found</span>\n            )\n        }\n        // Loading state\n        else {\n            const totalElements = 10;\n            // Initialize to an array to allow arbritary length of content loaders\n            commitList = []\n\n            commitList.push(<h4 key=\"title\"></h4>);\n\n            for (let i = 0; i < totalElements; i++) {\n                commitList.push(\n                    <div className=\"commit\" key={i}>\n                        <h4></h4>\n                        <p></p>\n                        <p></p>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className=\"sidebar\">\n                <button type=\"button\" className=\"close\" onClick={this.handleCloseClick} title=\"Close Sidebar\"><span aria-hidden=\"true\">&times;</span></button>\n                <h3>{this.props.repo} commits</h3>\n                <div className=\"commit-list\" ref={this.commitListRef}>\n                    <ErrorBoundry>\n                        {commitList}\n                    </ErrorBoundry>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SideBar;\n"]},"metadata":{},"sourceType":"module"}