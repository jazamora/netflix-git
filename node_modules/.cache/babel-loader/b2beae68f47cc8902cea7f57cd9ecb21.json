{"ast":null,"code":"import _classCallCheck from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/jazamora/dev/netflix/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/jazamora/dev/netflix/src/App.js\";\nimport React, { Component } from 'react';\nimport OrgForm from './components/OrgForm';\nimport SideBar from './components/Sidebar';\nimport Repo from './components/Repo';\n/**\n * App container for Git Org searching\n */\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      currentOrg: 'netflix',\n      repoList: null,\n      showSideBar: false,\n      currentRepo: null\n    };\n    _this.handleSideBarCloseClick = _this.handleSideBarCloseClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOrgChange = _this.handleOrgChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleRepoClick = _this.handleRepoClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /**\n   * Handle when the org has been changed\n   * \n   * @param {string} org \n   */\n\n\n  _createClass(App, [{\n    key: \"handleOrgChange\",\n    value: function handleOrgChange(org) {\n      this.setState({\n        currentOrg: org\n      });\n    }\n    /**\n     * Handle when the sidebar is closed\n     */\n\n  }, {\n    key: \"handleSideBarCloseClick\",\n    value: function handleSideBarCloseClick() {\n      this.setState({\n        showSideBar: false\n      });\n    }\n    /**\n     * Handle when a repo is selected and update the state to show the sidebar\n     * \n     * @param {string} repo \n     */\n\n  }, {\n    key: \"handleRepoClick\",\n    value: function handleRepoClick(repo) {\n      this.setState({\n        currentRepo: repo,\n        showSideBar: true\n      });\n    }\n    /**\n     * On initial mount, fetch the list of repositories based on the state default\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchRepoList();\n    }\n    /**\n     * Show loading state when the current org has changed\n     * \n     * @param {object} prevProps \n     * @param {object} prevState \n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.currentOrg !== prevState.currentOrg) {\n        //Reset the repo list state to show loading\n        this.setState({\n          repoList: null\n        });\n        this.fetchRepoList();\n      }\n    }\n    /**\n     * Fetch the list of repos for a specific org from git, ordering them by popularity\n     */\n\n  }, {\n    key: \"fetchRepoList\",\n    value: function fetchRepoList() {\n      var _this2 = this;\n\n      var url = \"http://api.github.com/search/repositories?q=user:\".concat(this.state.currentOrg, \"&sort=stars&order=desc\");\n      fetch(url, {\n        method: \"GET\"\n      }).then(function (response) {\n        if (!response.ok) {\n          throw Error(response);\n        }\n\n        return response.json();\n      }).then(function (data) {\n        _this2.setState({\n          repoList: data.items\n        });\n      }).catch(function (response) {\n        _this2.setState({\n          repoList: []\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var repoList; // Check to see if there are repoList to show\n\n      if (this.state.repoList && this.state.repoList.length) {\n        repoList = React.createElement(\"div\", {\n          className: \"main\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"repo-list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, this.state.repoList.map(function (repo) {\n          return React.createElement(Repo, {\n            key: repo.id,\n            full_name: repo.full_name,\n            description: repo.description || undefined,\n            stargazers_count: repo.stargazers_count,\n            handleRepoClick: _this3.handleRepoClick,\n            pushed_at: repo.pushed_at,\n            forks_count: repo.forks_count,\n            language: repo.language || undefined,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          });\n        })));\n      } // No results where found, handle empty state\n      else if (this.state.repoList) {\n          repoList = React.createElement(\"h4\", {\n            className: \"text-muted\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }, \"No repos found for git org:\", this.state.currentOrg);\n        } // Loading state\n        else {\n            repoList = [];\n\n            for (var i = 0; i < 10; i++) {\n              repoList.push(React.createElement(\"div\", {\n                className: \"repo\",\n                key: i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 143\n                },\n                __self: this\n              }, React.createElement(\"h2\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 144\n                },\n                __self: this\n              }), React.createElement(\"p\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 145\n                },\n                __self: this\n              }), React.createElement(\"p\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 146\n                },\n                __self: this\n              }), React.createElement(\"small\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 147\n                },\n                __self: this\n              })));\n            }\n          }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"netflix-logo.png\",\n        alt: \"Netflix\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Git Search\"))), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(OrgForm, {\n        onChange: this.handleOrgChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"row no-gutter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: this.state.showSideBar ? 'col-md-8' : 'col-md12',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, repoList), this.state.showSideBar && React.createElement(\"div\", {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(SideBar, {\n        onClick: this.handleSideBarCloseClick,\n        owner: this.state.currentOrg,\n        repo: this.state.currentRepo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/jazamora/dev/netflix/src/App.js"],"names":["React","Component","OrgForm","SideBar","Repo","App","props","state","currentOrg","repoList","showSideBar","currentRepo","handleSideBarCloseClick","bind","handleOrgChange","handleRepoClick","org","setState","repo","fetchRepoList","prevProps","prevState","url","fetch","method","then","response","ok","Error","json","data","items","catch","length","map","id","full_name","description","undefined","stargazers_count","pushed_at","forks_count","language","i","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport OrgForm from './components/OrgForm';\nimport SideBar from './components/Sidebar';\nimport Repo from './components/Repo';\n\n/**\n * App container for Git Org searching\n */\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentOrg: 'netflix',\n      repoList: null,\n      showSideBar: false,\n      currentRepo: null\n    }\n\n    this.handleSideBarCloseClick = this.handleSideBarCloseClick.bind(this);\n    this.handleOrgChange = this.handleOrgChange.bind(this);\n    this.handleRepoClick = this.handleRepoClick.bind(this);\n  }\n\n  /**\n   * Handle when the org has been changed\n   * \n   * @param {string} org \n   */\n  handleOrgChange(org) {\n    this.setState({\n      currentOrg: org\n    });\n  }\n\n  /**\n   * Handle when the sidebar is closed\n   */\n  handleSideBarCloseClick() {\n    this.setState({\n      showSideBar: false\n    });\n  }\n\n  /**\n   * Handle when a repo is selected and update the state to show the sidebar\n   * \n   * @param {string} repo \n   */\n  handleRepoClick(repo) {\n    this.setState({\n      currentRepo: repo,\n      showSideBar: true\n    })\n  }\n\n  /**\n   * On initial mount, fetch the list of repositories based on the state default\n   */\n  componentDidMount() {\n    this.fetchRepoList();\n  }\n\n  /**\n   * Show loading state when the current org has changed\n   * \n   * @param {object} prevProps \n   * @param {object} prevState \n   */\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentOrg !== prevState.currentOrg) {\n      //Reset the repo list state to show loading\n      this.setState({\n        repoList: null\n      });\n      this.fetchRepoList();\n    }\n  }\n\n  /**\n   * Fetch the list of repos for a specific org from git, ordering them by popularity\n   */\n  fetchRepoList() {\n    const url = `http://api.github.com/search/repositories?q=user:${this.state.currentOrg}&sort=stars&order=desc`;\n\n    fetch(url, {\n      method: \"GET\"\n    }).then(response => {\n      if (!response.ok) {\n        throw Error(response);\n      }\n\n      return response.json();\n    }).then((data) => {\n      this.setState({\n        repoList: data.items\n      });\n    }).catch((response) => {\n      this.setState({\n        repoList: []\n      });\n    });\n  }\n\n  render() {\n    let repoList;\n\n    // Check to see if there are repoList to show\n    if (this.state.repoList && this.state.repoList.length) {\n      repoList = (\n        <div className=\"main\">\n          <div className=\"repo-list\">\n            {\n              this.state.repoList.map((repo) => (\n                <Repo key={repo.id}\n                  full_name={repo.full_name}\n                  description={repo.description || undefined}\n                  stargazers_count={repo.stargazers_count}\n                  handleRepoClick={this.handleRepoClick}\n                  pushed_at={repo.pushed_at}\n                  forks_count={repo.forks_count}\n                  language={repo.language || undefined}\n                />\n              ))\n            }\n          </div>\n        </div>\n      )\n    }\n    // No results where found, handle empty state\n    else if (this.state.repoList) {\n      repoList = (\n        <h4 className=\"text-muted\">No repos found for git org:{this.state.currentOrg}</h4>\n      )\n    }\n    // Loading state\n    else {\n      repoList = []\n\n      for (let i = 0; i < 10; i++) {\n        repoList.push(\n          <div className=\"repo\" key={i}>\n            <h2></h2>\n            <p></p>\n            <p></p>\n            <small></small>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"container\">\n            <img src=\"netflix-logo.png\" alt=\"Netflix\" />\n            <h1>Git Search</h1>\n          </div>\n        </header>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-9\">\n              <OrgForm onChange={this.handleOrgChange} />\n            </div>\n          </div>\n\n          <div className=\"row no-gutter\">\n            <div className={this.state.showSideBar ? 'col-md-8' : 'col-md12'}>\n              {repoList}\n            </div>\n            {this.state.showSideBar && (\n              <div className=\"col-md-4\">\n                <SideBar onClick={this.handleSideBarCloseClick} owner={this.state.currentOrg} repo={this.state.currentRepo} />\n              </div>\n            )}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}